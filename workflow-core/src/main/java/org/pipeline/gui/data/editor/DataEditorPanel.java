/* =================================================================
 *                     conneXience Data Pipeline
 * =================================================================
 *
 * Copyright 2006 Hugo Hiden and Adrian Conlin
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details. 
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package org.pipeline.gui.data.editor;
import org.pipeline.core.data.*;
import org.pipeline.core.data.columns.*;
import org.pipeline.core.data.io.*;
import org.pipeline.gui.data.io.*;
import org.pipeline.gui.data.table.*;

import java.util.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 * This panel provides an editor for a set of data. It allows data 
 * to be imported, rows + columns added / removed etc.
 * @author  hugo
 */
public class DataEditorPanel extends javax.swing.JPanel implements DataTableEditListener {
    /** Data set being edited */
    private Data data = null;
    
    /** Data table model */
    private DataTableModel model = null;
        
    /** Table for the data */
    private javax.swing.JTable dataTable;
    
    /** Listeners */
    public Vector listeners = new Vector();
    
    /** Preferred column width */
    private int columnWidth = 75;
    
    /** Creates new form DataEditorPanel */
    public DataEditorPanel() {
        initComponents();
    }
    
    /** Set the edited data */
    public void setData(Data data){
        this.data = data;
        if(model!=null){
            model.removeDataTableEditListener(this);
        }
        
        if(data!=null){           
            model = new DataTableModel(data);
            model.addDataTableEditListener(this);
            model.setEditable(true);
            dataTable = new javax.swing.JTable(model);
            dataTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            setColumnWidths();
            dataScroller.setViewportView(dataTable);
            dataScroller.updateUI();
        }
    }
    
    /** Get the edited data */
    public Data getData(){
        return data;
    }
    
    /** Set the column widths */
    private void setColumnWidths(){
        // Set preferred column widths
        int size = dataTable.getColumnModel().getColumnCount();
        for(int i=0;i<size;i++){
            dataTable.getColumnModel().getColumn(i).setMinWidth(columnWidth);
        }          
    }
    /** Add a listener */
    public void addDataEditorListener(DataEditorListener listener){
        if(!listeners.contains(listener)){
            listeners.addElement(listener);
        }
    }
    
    /** Remove a listener */
    public void removeDataEditorListener(DataEditorListener listener){
        if(listeners.contains(listener)){
            listeners.removeElement(listener);
        }
    }
    
    /** Columns changed */
    private void notifyColumnsChanged(){
        Enumeration e = listeners.elements();
        while(e.hasMoreElements()){
            ((DataEditorListener)e.nextElement()).columnsChanged(data);
        }
    }
    
    /** Rows changed */
    private void notifyRowsChanged(){
        Enumeration e = listeners.elements();
        while(e.hasMoreElements()){
            ((DataEditorListener)e.nextElement()).rowsChanged(data);
        }
    }
    
    /** Data changed */
    private void notifyDataChanged(){
        Enumeration e = listeners.elements();
        while(e.hasMoreElements()){
            ((DataEditorListener)e.nextElement()).dataChanged(data);
        }
    }
    
    /** Data has chagned */
    public void dataChanged(Data data){
        notifyDataChanged();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        newColumn = new javax.swing.JButton();
        newRow = new javax.swing.JButton();
        deleteColumn = new javax.swing.JButton();
        deleteRow = new javax.swing.JButton();
        columnName = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        dataScroller = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        newColumn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pipeline/gui/data/resource/UpdateColumn.gif"))); // NOI18N
        newColumn.setToolTipText("Create a new column");
        newColumn.setBorderPainted(false);
        newColumn.setContentAreaFilled(false);
        newColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newColumnActionPerformed(evt);
            }
        });
        jToolBar1.add(newColumn);

        newRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pipeline/gui/data/resource/UpdateRow.gif"))); // NOI18N
        newRow.setToolTipText("Create a new row");
        newRow.setBorderPainted(false);
        newRow.setContentAreaFilled(false);
        newRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newRowActionPerformed(evt);
            }
        });
        jToolBar1.add(newRow);

        deleteColumn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pipeline/gui/data/resource/DeleteColumn.gif"))); // NOI18N
        deleteColumn.setToolTipText("Delete the selected column");
        deleteColumn.setBorderPainted(false);
        deleteColumn.setContentAreaFilled(false);
        jToolBar1.add(deleteColumn);

        deleteRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pipeline/gui/data/resource/DeleteRow.gif"))); // NOI18N
        deleteRow.setToolTipText("Delete the selected column");
        deleteRow.setBorderPainted(false);
        deleteRow.setContentAreaFilled(false);
        deleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteRow);

        columnName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pipeline/gui/data/resource/EditBCard.gif"))); // NOI18N
        columnName.setToolTipText("Change the selected column name");
        columnName.setBorderPainted(false);
        columnName.setContentAreaFilled(false);
        jToolBar1.add(columnName);

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pipeline/gui/data/resource/page_white_get.png"))); // NOI18N
        loadButton.setToolTipText("Load a new set of data");
        loadButton.setBorderPainted(false);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadButton);

        add(jToolBar1, java.awt.BorderLayout.NORTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.BorderLayout());
        add(jPanel1, java.awt.BorderLayout.SOUTH);

        dataScroller.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        dataScroller.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        add(dataScroller, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        DelimitedTextDataImporter importer = new DelimitedTextDataImporter();

        // Show in a dialog
        Object[] components = new Object[1];
        components[0] = new DelimitedTextImportPanel(importer);
        ((DelimitedTextImportPanel)components[0]).setPreferredSize(new Dimension(600, 450));
        
        String[] buttons = {"OK", "Cancel"};
        int result = JOptionPane.showOptionDialog(null, components, "Import Data", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, new ImageIcon(), buttons, buttons[0]);
        if(result==JOptionPane.OK_OPTION){
            Data importedData = importer.getData();
            try {
                for(int i=0;i<importedData.getColumns();i++){
                    data.addColumn(importedData.column(i));
                }
                
            } catch (Exception e){
                e.printStackTrace();
            }
            setData(data);
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /** Delete the currently selected row */
    private void deleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowActionPerformed
        if(data!=null){
            int row = dataTable.getSelectedRow();
            try {
                data.removeRow(dataTable.getSelectedRow());
                model.notifyDataChange();
                notifyRowsChanged();
                
            } catch (Exception e){
                e.printStackTrace();
            }
            
        }
    }//GEN-LAST:event_deleteRowActionPerformed

    /** Add an empty row to the end of the data */
    private void newRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRowActionPerformed
        if(data!=null){
            try {
                int row = dataTable.getSelectedRow();
                data.addEmptyRows(row + 1, 1);
                
            } catch (Exception e){
                e.printStackTrace();
            }
            model.notifyDataChange();
            notifyRowsChanged();
        }
    }//GEN-LAST:event_newRowActionPerformed

    /** Add a new column of data */
    private void newColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newColumnActionPerformed
        NewColumnDialog dialog = new NewColumnDialog(null, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        if(dialog.getAccepted()){
            try {
                Column col = dialog.createColumn();
                if(data!=null){
                    if(data.getColumns()>0){
                        // Set the new column to the correct size
                        col.nullifyToSize(data.getLargestRows());
                    }
                    data.addColumn(col);
                    model.notifyDataChange();
                    model.fireTableStructureChanged();
                    
                    dataTable.setModel(new DefaultTableModel());
                    dataTable.updateUI();
                    dataTable.setModel(model);
                    dataTable.updateUI();
                    notifyColumnsChanged();
                }
                
                
            } catch (DataException e){
                javax.swing.JOptionPane.showMessageDialog(this, "Error creating column: " + e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_newColumnActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton columnName;
    private javax.swing.JScrollPane dataScroller;
    private javax.swing.JButton deleteColumn;
    private javax.swing.JButton deleteRow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton newColumn;
    private javax.swing.JButton newRow;
    // End of variables declaration//GEN-END:variables
    
}
